#!/bin/bash
##################################################################
# Author  : Percio Andrade
# Email   : perciocastelo@gmail.com
# Info    : Shell script to consult dns and register from domain
# Version : 1.5
##################################################################

# If you find any bug please report.

# CHECK FOR WWW-LIB ( GET COMMAND )
GETCHECK=$(rpm -qa|grep perl-libwww-perl)
if [[ -z $GETCHECK ]];then yum install -y perl-libwww-perl; fi

# CHECK FOR SOCKET HTTPS URL 
SOCKETCHECK=$(rpm -qa|grep perl-IO-Socket-SSL)
if [[ -z $SOCKETCHECK ]];then yum install -y perl-IO-Socket-SSL; fi
clear

## INITIAL CONFIG
VERSION="1.5"
DATE=$(date)
DOMAIN=$2
REG_BR_WHOIS="https://registro.br/2/whois?qr="
vDNS="https://raw.githubusercontent.com/percioandrade/vdns/master/vdns" #USE TO CHECK VERSION

## BASHCSS
pret='\E[0;30m'   # Black
verm='\E[0;31m'   # Red
verd='\E[0;32m'   # Green
amar='\E[0;33m'   # Yellow
azul='\E[0;34m'   # Blue
mage='\E[0;35m'   # Magenta
cian='\E[0;36m'   # Ciano
bran='\E[0;37m'   # White
bold='\033[37;4;1m' #BOLD
und='\033[37;4m'
rese=$(tput sgr0) # No color.
OK="${verd}[OK]${rese}";                                                                                                     ATT="${amar}[!]${rese}";
FAIL="${verm}[!]${rese}";

## HELP INFO
function SHOW_HELP(){
printf "usage: vdns -a -n -d -w -p -m -r -f -k -s -b -i -c domain
	-u -h

Options:
	-a	: Full DNS lookup
	-n	: Only return root servers
	-d	: Only return root NSR servers
	-p	: Only return ping check on WWW
	-m	: Only return MX
	-r	: Only return reverse
	-f	: Only return SPF
	-k	: Only return DKIM
	-o	: Only return Office values
	-c	: Consult domain registrar situation
	-l	: Check propagation from domain in World
	-b	: Show DNS zones for domain in bind format
	-u	: Verify if exist update
	-s	: Save Query on txt file
	-h	: Shows available options
  
	eg:
  	vdns -a domain.com
  	vdns -k domain.com
  	vdns -s domain.com
       "
  exit
}

## CHECK VERSION
function SHOW_VERSION(){
vCURL=$(GET ${vDNS}|grep -m1 "VERSION="|cut -d '"' -f2)
if [[ ${VERSION} != ${vCURL} ]];then
	printf "\n${ATT} - Is there a new update for vDNS. Version ${verm}$vCURL${rese}, please update on ${vDNS}\n"
else
	printf "\n${OK} - Your vDNS version is up to date ${verd}$VERSION${rese}\n\n"
fi
}

## ARGUMENT CHECK
if [[ -z $1 ]];then
	printf "\nNo arguments parsed, use -h for help information.\n\n"
	exit
elif [[ "$1" = "-u" ]];then
	SHOW_VERSION
	exit
elif [[ "$1" = "-h" ]];then
	SHOW_HELP
	exit
elif [[ "$1" = "-" ]];then
	printf "\nIncorrect argument, please use -h for hel information.\n\n"
	exit
fi

## DOMAIN CHECK
if [[ -z "$2" ]];then
	printf "\nPlease inform a domain, use -h for help information.\n\n"
	exit
fi


## PROPAGATION FUNCTION
function SHOW_PROPAGATION(){
LIST_IP="
Google1:8.8.8.8 Google2:8.8.8.4 UltraDNS:156.154.70.1 UltraDNS2:156.154.71.1 OpenDNS:208.67.220.220 OpenDNS2:208.67.222.222 DynGuide:216.146.35.35 DynGuide2:216.146.36.36 Africa:185.19.104.45 Alemanha:5.9.49.12 EUA:206.125.173.29 Australia:45.63.25.55 Canada:192.95.54.3 Eslovenia:213.161.5.12 Europa:185.190.82.182 França:87.98.175.85 Holanda:108.61.164.218 India:139.59.17.152 Japao:45.32.28.232 Oceano_Indico:142.4.204.111 Reino_Unido:178.32.196.201 Romenia:89.18.27.34 Suiça:31.3.135.232 Vietna:103.199.16.144 Belem:200.149.55.104 Belo_Horizonte:201.17.128.15 Brasilia:200.252.98.162 Campinas:143.106.24.200 Ceara:200.202.93.75 Cerquilho:200.187.80.5 Cruzeiro_do_sul:201.10.1.2 Curitiba:200.175.5.139 Fortaleza:189.90.16.20 Goiania:200.242.131.6 Luzinopolis:200.199.201.23 Manaus:200.174.144.14 Niteroi:200.20.0.18 Para:200.149.55.142 Porto_Alegre:200.175.89.139 Recife:200.167.216.14 Rio_Claro:200.205.125.58 Rio_de_Janeiro:200.169.126.15 Sao_Francisco_do_Sul:200.19.215.1 Sao_Paulo:200.186.100.10 Sergipe:189.77.13.3
"

## PROPAGATION CHECK
for PROP in `echo "${LIST_IP}"|sed 's/ /\n/g'`;do
	paste <(echo Propagation for domain: ${DOMAIN} on server $(echo ${PROP}|cut -d: -f1):) <(dig A $(echo ${PROP}|cut -d: -f2) ${DOMAIN} +short)|sed -e 'N;s/\n/ /'
done
}

## INIT QUERIES
printf "\nDNS info for domain: ${DOMAIN}\n"

# BYPASS IP BLOCK FROM REGISTRO.BR
function WHOIS_REGISTRO_BR(){
CURLWHOISBR=$(GET ${REG_BR_WHOIS}${DOMAIN}|grep -o 'negada')
if [[ $CURLWHOISBR = "negada" ]];then
	printf "http://www.webproxy.net/view?q=${REG_BR_WHOIS}${DOMAIN}\n"
else
	printf "${REG_BR_WHOIS}${DOMAIN}\n"
fi
}

function REGISTRO_BR(){
RBRSEARCH=$(GET ${REG_BR_WHOIS}${DOMAIN}|grep -oEm1 "(Ativo|Inativo|Publicado|Aguardando publicação|Congelado|Aguardando congelamento|Congelado por ordem judicial|Processo de liberação|Reservado pelo CG|inexistente|inválida)")

if [[ ${RBRSEARCH} = "Ativo" ]];then
	printf "\n${OK} - ${DOMAIN} active but not published yet. [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
	exit
elif [[ ${RBRSEARCH} = "Inativo" ]];then
	printf "\n${OK} - ${DOMAIN} exist but was disabled for some reason. [WHOIS: `WHOIS_REGISTRO_BR`] \n\n"
	exit
elif [[ ${RBRSEARCH} = "Publicado" ]];then
	printf "\n${OK} - ${DOMAIN} active and published without problems. [WHOIS: `WHOIS_REGISTRO_BR`] \n\n"
elif [[ ${RBRSEARCH} = "Aguardando publicação" ]];then
	printf "\n${OK} - ${DOMAIN} active and is awaiting publishing, the time for complete publishing is 2 or 4 hours. [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
elif [[ ${RBRSEARCH} = "Congelado" ]];then
	printf "\n${ATT} - ${DOMAIN} is frozen and not functional. [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
elif [[ ${RBRSEARCH} = "Aguardando congelamento" ]];then
	printf "\n${ATT} - ${DOMAIN} will be frozen and will not be functional. [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
elif [[ ${RBRSEARCH} = "Congelado por ordem judicial" ]];then
	printf "\n${ATT} - ${DOMAIN} was frozen by judicial order and is not functional. [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
elif [[ ${RBRSEARCH} = "Processo de liberação" ]];then
	printf "\n${ATT} - ${DOMAIN} is awaiting the liberation process can you check this in https://registro.br/dominio/proclib.html [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
	exit
elif [[ ${RBRSEARCH} = "Reservado pelo CG" ]];then
	printf "\n${ATT} - ${DOMAIN} was reserved for any purpose and not will be registered. [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
	exit
elif [[ ${RBRSEARCH} = "inexistente" ]];then
	print "\n${ATT} - ${DOMAIN} not registered. [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
	exit
elif [[ ${RBRSEARCH} = "inválida" ]];then
	printf "\n${ATT} - ${DOMAIN} invalid query. [WHOIS: `WHOIS_REGISTRO_BR`]\n\n"
	exit
else
	print "\n${ATT} - A error occurs please submit a ticket."
	exit
fi
}

function INTERNATIONAL_DOMAIN(){
INTERCHECK=$(GET http://nic.com/whois?domain=${DOMAIN}|grep -o "is not in the whois database")
if [[ ${INTERCHECK} = "is not in the whois database" ]];then
	printf "\n${ATT} - ${DOMAIN} not registered, exiting.\n\n"
	exit
else
	printf "\n${OK} - ${DOMAIN} registered. [ WHOIS: http://www.whois.com/whois/$DOMAIN ]\n\n";
fi
}

function DOMAIN_CHECK(){
TDL_DOMAIN=$(echo ${DOMAIN}|egrep -oEm1 "(.com|.com.br|.br|.es)") # CORRECTION FOR ES

printf "\n\n${und}---- DOMAIN ---------- ${rese}\n"

if [[ ${TDL_DOMAIN} = ".com.br" ]]||[[ ${TDL_DOMAIN} = ".br" ]];then
	REGISTRO_BR
elif [[ ${TDL_DOMAIN} = ".es" ]];then
	printf "Spanish Domain doens't have Whois database."
else
	INTERNATIONAL_DOMAIN
fi
}

function GET_ROOT_S(){
echo -ne 'SRV		#								(1%) Starting\r'
## GET ROOT SERVER
ROOTS=$(dig DS +additional $DOMAIN|grep SOA|awk '{print $5}'|sort -dbf)
}

function GET_RNS(){
echo -ne 'RNS		#####								(10%) Geting first NS from root server\r'

## GET FIST NAMESERVER
SRV=$(dig CNAME +noadditional +noquestion +nocomments +nocmd +nostats +norec $DOMAIN. @$ROOTS|grep -m1 NS|awk '{print $5}'|sort -dbf)
}

function GET_IP(){
echo -ne 'IP		##########							(15%) Geting IP from RootServer\r'

## GET IP FROM ROOTSERVER
IPNS=$(dig A +noquestion +nocomments +nocmd +nostats +norec $DOMAIN. @$ROOTS|sort -dbf|grep A|awk '{print $5}')
}

function GET_ROOT_RNS(){
echo -ne 'RNS		###############							(20%) Start the first consult on NS\r'

## CHECK ROOTSERVER
NAMESERVER=$(dig CNAME +noadditional +noquestion +nocomments +nocmd +nostats +norec $DOMAIN. @$ROOTS|grep -v SOA|sort -dbf)
}

function GET_IP_W(){
echo -ne 'IP		####################						(25%) Dig IP from Webhost\r'

### GET IP FROM WEBHOST
IPDNS=$(dig NS +noquestion +nocomments +nocmd +nostats +norec $DOMAIN. @$SRV|sort -dbf|grep A|awk '{print $5}')

echo -ne 'DNS		#########################					(30%) Lets talk with webhost at this time\r'

## CHECK DNS
NS=$(dig NS +noadditional +noquestion +nocomments +nocmd +nostats +norec $DOMAIN @$SRV|sort -dbf)

## If NS fail from query "NS" we get directly from domain
FAILNS=$(dig NS +nostats +nocmd +nocomments +noquestion $DOMAIN|grep NS)
}

function GET_WWW(){
echo -ne 'WWW		##############################					(35%) OK i will get now the IP value from WWW\r'


## CHECK WWW FROM DOMAIN
A=$(dig WWW +short $DOMAIN @$SRV|sort -dbf)
}

function GET_MX(){
echo -ne 'MX1		##################################				(40%) Nice, checking MX\r'

## CHECK MX
MX=$(dig -t MX +noall +answer $DOMAIN @$SRV|sort -dbf)
}

function GET_RVS(){
echo -ne 'RVS		#######################################				(45%) Checking reverse IP from WWW\r'

## CHECK REVERSE
REVERSE=$(dig -x $A +additional +short +norec)
}

function GET_SPF(){
echo -ne 'SPF		############################################			(50%) And now checking SPF\r'

#CHECK SPF 
SPF=$(dig TXT +short $DOMAIN @$SRV|sort -dbf)
}

function GET_DKIM(){
echo -ne 'DKIM		#################################################		(55%) Checking DKIM\r'

## CHECK DKIM DEFAULT
DKIM=$(dig -ttxt default._domainkey.$DOMAIN @$SRV +short|grep -v spf1)
}

function GET_OFFICE(){
## CHECK OFFICE
echo -ne 'MX2		######################################################		(60%) Let me check if have addons\r'

OFFICE=$(dig srv _sipfederationtls._tcp.${DOMAIN} +short)
OFFICE2=$(dig srv _sip._tls.${DOMAIN} +short)
}

function GET_PING(){
echo -ne 'PING		###########################################################	(90%) Ping pong ping pong\r'

## CHECK PING
vPING=$(ping -q -c 1 $DOMAIN >/dev/null)
}

echo -ne '${OK}		################################################################(100%) All done\r'


       #####################################################################
       ######################## DO NOT MODIFY BELOW ########################
       ######################################### ###########################


clear

## NS QUERY
function SHOW_NS(){
printf "${und}---- NS --------------${rese}\n"
if [[ ${NAMESERVER} = no ]];then # nic.br
        printf "${ATT} - Your IP has been blocked on registro.br, please try query  again within 15 minutes.\n"
elif [[ ${NAMESERVER} = ${ROOTS} ]]||[[ -z ${NAMESERVER} ]];then
        printf "\n${FAIL} - Unable to obtain DNS servers of your domain. Verify that the domain exists and/or is configured correctly."
else
        printf "\n${OK} - NS received from your nameservers listed as parents servers on root server ${verd}${ROOTS}${rese} are:\n";
        paste  <(echo "$NAMESERVER") <(echo "$IPNS");
        printf "\n${OK}: The parent server ${verd}${ROOTS}${rese} has your nameservers listed."
fi
}


## NSR QUERY
function SHOW_DNS(){
printf "\n\n${und}---- NSR ------------- ${rese}\n\n"
if [[ -z ${NS} ]]||[[ -z ${FAILNS} ]];then
        printf "${FAIL} - Unable to get the nameservers directly from the server hosting.\n"
elif [[ ${NS} = ${NAMESERVER} ]]||[[ ! ${FAILNS} ]];then
        printf "${OK} - NS records got from your nameservers listed at the parent NS are:\n"
        paste <(echo "$NS") <(echo "$IPDNS");
else
        printf "${ATT} - Unable to get the nameservers directly from the hosting server, the following query is for NS directly on domain:\n"
        paste <(echo "$FAILNS") <(echo "$FAILIP");
        printf "\n${FAIL} The following nameservers are listed at your nameservers for your domain ${DOMAIN}, but are not listed at the parent nameservers at ${ROOTS}\n"
fi
}

## WWW QUERY
function SHOW_WWW(){
printf "\n${und}---- WWW -------------${rese}\n\n"

if [[ -z ${A} ]];then
        printf "${FAIL} - WWW value from does not seem to point to an IP.\n\n"
else
        printf "${OK} - Domain points the value WWW for:\n${A}\n\n"
fi
}

## PING QUERY
function SHOW_PING(){
if ! ${vPING};then
        printf "${FAIL} - Domain did not answer to ping."
elif [[ ${vPING} = ${A} ]];then
        printf "${OK} - Domain is getting a return ping which answers to the same DNS server."
else
        printf "${OK} - Domain had response from ping to the IP:\n${A}"
fi
}

## MX QUERY
function SHOW_MX(){
printf "\n\n${und}---- MX ---------------${rese}\n\n"
if [[ -z ${MX} ]];then
        printf "${ATT} - Domain has no MX entry registered.\n"
else
        #printf "${OK} - Domain points the MX to:\n${MX}\n\n"
        printf "${MX}"
fi
}

## REVERSE QUERY
function SHOW_REVERSE(){
if [[ -z ${REVERSE} ]];then
        printf "\n\n${ATT} - No reverse DNS (PTR) entries for ${A}. You should contact your ISP and ask him to add a PTR record for your ips."
else
        printf "\n\n${OK} - Reverse DNS (PTR) found for: \n${A} -> ${REVERSE}"
fi
}

## SPF QUERY
function SHOW_SPF(){
if [[ -z ${SPF} ]]||[[ ${SPF} = "'TXT'" ]];then
	printf "${FAIL} - There are no registered SPF values.\n"
else
	printf "\n\n${und}---- SPF --------------${rese}\n\n"
	printf "%1s\t%2s\t%3s\t%4s\%5s\t%6s\t%7s\t%8s\t%9s" ${SPF}

fi
}

## DKIM QUERY
function SHOW_DKIM(){
if [[ -z ${DKIM} ]];then
	printf "\n${ATT} - Default DKIM values is not registered.\n"
else
	printf "\n\n${und}---- DKIM -------------${rese}\n\n"
	printf "%1s\t%2s\t%3s\t%4s\%5s\t%6s\t%7s\t%8s\t%9s" ${DKIM}
fi
}

## OFFICE QUERY
function SHOW_OFFICE(){
if [[ -z ${OFFICE} ]];then
	printf "\n${ATT} - Default OFFICE values is not registered.\n"
else
	printf "\n${und}---- OFFICE -----------${rese}\n\n"
	printf "%1s\t%2s\t%3s\t%4s\n" ${OFFICE}
	printf "%1s\t%2s\t%3s\t%4s" ${OFFICE2}
fi
}

# MENU OPTIONS
while getopts "abcdfhniklowmpqrskz" opt; do
case ${opt} in
h) SHOW_HELP;;
a) DOMAIN_CHECK;GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;GET_WWW;GET_MX;GET_RVS;GET_SPF;GET_DKIM;GET_OFFICE;GET_PING;SHOW_NS;SHOW_DNS;SHOW_WWW;SHOW_PING;SHOW_MX;SHOW_REVERSE;SHOW_SPF;SHOW_DKIM;SHOW_OFFICE;echo -e "\n" && exit;;
n) GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;clear;SHOW_NS;;
d) GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;clear;SHOW_DNS;;
p) GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;GET_WWW;GET_PING;clear;SHOW_PING;;
q) dig -t ANY ${DOMAIN};;
b) dig @8.8.8.8 ${DOMAIN};;
m) GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;GET_MX;clear;SHOW_MX;;
r) GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;GET_WWW;GET_RVS;clear;SHOW_REVERSE;;
f) GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;GET_WWW;GET_RVS;GET_SPF;clear;SHOW_SPF;;
k) GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;GET_WWW;GET_DKIM;clear;SHOW_DKIM;;
c) DOMAIN_CHECK;;
o) GET_ROOT_S;GET_RNS;GET_IP;GET_ROOT_RNS;GET_IP_W;GET_OFFICE;clear;SHOW_OFFICE;;
l) SHOW_PROPAGATION;;
s) echo -e "\nPlease wait, Im working on it ....\n" && echo "Query on $DATE for $DOMAIN" >> $DOMAIN.txt && for SAVE in DOMAIN_CHECK GET_ROOT_S GET_RNS GET_IP GET_ROOT_RNS GET_IP_W GET_WWW GET_MX GET_RVS GET_SPF GET_DKIM GET_OFFICE GET_PING SHOW_NS SHOW_DNS SHOW_WWW SHOW_PING SHOW_MX SHOW_REVERSE SHOW_SPF SHOW_DKIM SHOW_OFFICE;do ${SAVE} >> ${DOMAIN}.txt;done;echo -e "Your file was saved on `pwd`/$DOMAIN.txt\n"; ;;
\? ) echo "Invalid option:              - $opt" >&2 ;;
:  ) echo "Missing argument             - $opt" >&2; exit 1;;
*  ) echo "Option not implemented:      - $opt" >&2; exit 1;;
esac
done
shift $(($OPTIND - 1))
exit
